// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Pbmessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PbmessageRoot

@implementation PbmessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PbmessageRoot_FileDescriptor

static GPBFileDescriptor *PbmessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - pbmessage

@implementation pbmessage

@dynamic srcid;
@dynamic dstid;
@dynamic packettype;
@dynamic bodytype;
@dynamic srccts;
@dynamic serverid;
@dynamic srcdeviceid;
@dynamic status;
@dynamic cts;
@dynamic fromname;
@dynamic body;

typedef struct pbmessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t packettype;
  int32_t bodytype;
  int32_t status;
  NSString *srcid;
  NSString *dstid;
  NSString *srcdeviceid;
  NSString *fromname;
  NSData *body;
  int64_t srccts;
  int64_t serverid;
  int64_t cts;
} pbmessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "srcid",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Srcid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(pbmessage__storage_, srcid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dstid",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Dstid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(pbmessage__storage_, dstid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packettype",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Packettype,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(pbmessage__storage_, packettype),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bodytype",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Bodytype,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(pbmessage__storage_, bodytype),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "srccts",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Srccts,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(pbmessage__storage_, srccts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serverid",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Serverid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(pbmessage__storage_, serverid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "srcdeviceid",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Srcdeviceid,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(pbmessage__storage_, srcdeviceid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Status,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(pbmessage__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cts",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Cts,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(pbmessage__storage_, cts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromname",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Fromname,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(pbmessage__storage_, fromname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = pbmessage_FieldNumber_Body,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(pbmessage__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[pbmessage class]
                                     rootClass:[PbmessageRoot class]
                                          file:PbmessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(pbmessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
